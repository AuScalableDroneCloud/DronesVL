#Deployment of NodeODM / NodeMICMAC or other procesing nodes
# includes ClusterODM instance
# only the first replica ClusterODM will be used

#Headless service, required for statefulset
#nodes available on {node-type}-{#}.{node-type}-svc
apiVersion: v1
kind: Service
metadata:
  name: ${NODE_TYPE}-svc
  labels:
    app: ${NODE_TYPE}-service
spec:
  ports:
  ports:
  - name: "node"
    port: 3000
    targetPort: 3000
  - name: "cluster"
    port: 3001
    targetPort: 3001
  - name: "admin"
    port: 8080
    targetPort: 8080
  selector:
    app: ${NODE_TYPE}
  clusterIP: None #Headless

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${NODE_TYPE}
spec:
  serviceName: "${NODE_TYPE}-svc"
  replicas: ${NODE_COUNT}
  selector:
    matchLabels:
      app: ${NODE_TYPE}
  template:
    metadata:
      labels:
        app: ${NODE_TYPE}
    spec:
      #NodeODM/ClusterODM now run as user
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000

      containers:
      - name: ${NODE_TYPE}
        image: ${NODE_IMAGE}
        env:
        - name: CLUSTERODM
          value: ${CLUSTER_NAME}
        - name: NODETYPE
          value: ${NODE_TYPE}
        command: ["/bin/bash", "/var/www/node_setup.sh", "${NODE_ARGS}"]
        ports:
        - containerPort: 3000
          name: node
        volumeMounts:
        - name: ${NODE_TYPE}-storage
          mountPath: "/var/www/localdisk"
        - name: node-setup
          mountPath: /var/www/node_setup.sh
          subPath: node_setup.sh
        - name: ${NODE_TYPE}-ephemeral
          mountPath: "/var/www/ephemeral"

        # https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/
        # NOTE: requesting GPU consumes the resource, but it will still
        # be available without doing so!
        #resources:
        #  limits:
        #    nvidia.com/gpu: ${NODE_GPUS} # requesting GPUs

      - name: clusterodm
        image: opendronemap/clusterodm
        #image: ghcr.io/auscalabledronecloud/clusterodm
        command: ["/bin/bash", "-c"]
        args:
          - rm -rf /var/www/tmp;
            mkdir -p /var/www/data/tmp;
            ln -s /var/www/data/tmp /var/www/tmp;
            node /var/www/index.js -p 3001 --public-address http://clusterodm-${CLUSTER_NAME}:3001;
        ports:
        - containerPort: 3001
          name: node
        - containerPort: 8080
          name: admin

      #ConfigMap containing setup.sh script
      volumes:
        - name: node-setup
          configMap:
            name: script-configmap
            items:
            - key: node_setup.sh
              path: node_setup.sh

        #Create an ephemeral volume on startup
        - name: ${NODE_TYPE}-ephemeral
          ephemeral:
            volumeClaimTemplate:
              metadata:
                labels:
                  type: ${NODE_TYPE}-ephemeral
              spec:
                accessModes: [ "ReadWriteOnce" ]
                storageClassName: ${NODE_STORAGE_CLASS}
                resources:
                  requests:
                    storage: ${NODE_VOLUME_SIZE}

        #Use hostPath to SSD mount instead for ephemeral storage
        - name: ${NODE_TYPE}-storage
          hostPath:
            # directory location on host
            path: /var/mnt/scratch
            type: DirectoryOrCreate #Prevents errors if not there

      #Deployed on each type of node based on GPU type
      nodeSelector:
        nvidia.com/gpu.product: ${NODE_SELECTOR}

      #Allow running on compute nodes
      tolerations:
      - key: "compute"
        operator: "Exists"
        effect: "NoSchedule"

      #One pod per k8s node
      #https://stackoverflow.com/a/64958458
      #https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: ${NODE_TYPE}

      # Zombie repellent
      # https://www.back2code.me/2020/02/zombie-processes-back-in-k8s/
      # https://stackoverflow.com/questions/50803268/kubernetes-equivalent-of-docker-run-init
      shareProcessNamespace: true

