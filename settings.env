####################################################################################################
# OpenDroneMap on k8s for ASDC DronesVL
# Owen Kaluza, Monash University, August 2020
#
# Settings and setup script - use "source settings.env" to apply
#
# - This script also sets up access to openstack and the kubernetes cluster - required to use kubectl
# - Needs openstack nectar credentials (set with RC_FILE or source before running)
####################################################################################################

#Hostname where app will run
export WEBAPP_HOST=asdc.erc.monash.edu

#Set cluster name
CLUSTER=asdc-k8s
#Create a cluster template of this name
TEMPLATE=${CLUSTER}-template
#Number of nodes in cluster
NODES=4
#Deployment of images on nodes
NODE_ODM=4
NODE_MICMAC=1
#Image to use for nodes
#See: https://wiki.openstack.org/wiki/Magnum#Compatibility_Matrix and kube_tag label
#IMAGE=fedora-atomic-latest #Original known working image, limited to kubernetes version <=1.15
#IMAGE=fedora-coreos-31 #First coreos image, skipped over
IMAGE=fedora-coreos-32 #Requires flannel restart or has dns lookup failures
#This is the default keypair, needs to be the name of an existing keypair in openstack
KEYPAIR=ASDC_ODM
#Availability zone
ZONE=monash-02
#External network
NETWORK=monash
#Flavour for the master node used for kubernetes
MASTER_FLAVOUR=m3.small
#Flavour for the minions - this is where the actual pods are deployed
FLAVOUR=mon.c22r60.gpu-p4   #60G RAM
#FLAVOUR=mon.c22r100.gpu-p4 #100G RAM

#Openstack rc file
RC_FILE=Monash-Drone-openrc.sh

#Auth0 env file - contains auth0 key and secret
AUTH0_FILE=auth0.env

#Volume sizes for persistent storage in GB
# - Volume assigned to each NodeODM/ClusterODM processing nodes
export NODE_VOLSIZE=400
# - PostresSQL Database for the webapp
export DB_VOLUME_SIZE=10
# - Working volume for the webapp
export WEBAPP_VOLUME_SIZE=500

# JupyterHub chart version to install
export JHUB_CHART_VERSION=0.11.1
# - Database volume for jupyterhub
export JHUB_VOLUME_SIZE=1
# Host for jupyterhub
export JHUB_HOST=jupyter.monash-drone.cloud.edu.au
# Need AZ for storageclass
export ZONE

####################################################################################################

#Ensure ID set for openstack
if [ -z ${OS_PROJECT_ID+x} ];
then
  echo "OS_PROJECT_ID is unset";
  if [ -f $RC_FILE ]; then
    echo "Using $RC_FILE."
    source $RC_FILE
  else
    echo "Openstack rc file $RC_FILE does not exist."
    echo "Please source your openstack credentials"
    return 1
  fi
else
  echo "OS_PROJECT_ID is set to '$OS_PROJECT_ID'";
fi

#Auth0 key/secret
if [ -z ${WO_AUTH0_KEY+x} ] || [ -z ${WO_AUTH0_SECRET+x} ] || [ -z ${WO_AUTH0_DOMAIN+x} ];
then
  if [ -f $AUTH0_FILE ]; then
    echo "Using $AUTH0_FILE."
    source $AUTH0_FILE
  else
    echo "Auth0 env file $AUTH0_FILE does not exist."
    echo "Please set auth0 key/secret to use auth0"
  fi
fi

#Need to export to work with envsubst
export WO_AUTH0_KEY
export WO_AUTH0_SECRET
export WO_AUTH0_DOMAIN
export WO_AUTH0_SUBDOMAIN
export JH_ADMIN_USER
####################################################################################################

#If ./config exists, use it for kubectl
if [ -s "config" ] && grep "${CLUSTER}" config;
then
  export KUBECONFIG=$(pwd)/config
  echo "Set KUBECONFIG='$KUBECONFIG'";

fi

if ! command -v kubectl &> /dev/null
then
  #Add cwd to path so kubectl can be run without dir
  PATH=$PATH:$(pwd)
  if ! command -v kubectl &> /dev/null
  then
    echo "kubectl could not be found! attempting to download..."
    curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
    chmod +x ./kubectl
  fi
fi

