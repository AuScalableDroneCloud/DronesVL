####################################################################################################
# OpenDroneMap on k8s for ASDC DronesVL
# Owen Kaluza, Monash University, August 2020
#
# Settings and setup script - use "source settings.env" to apply
#
# - This script also sets up access to openstack and the kubernetes cluster - required to use kubectl
# - Needs openstack nectar credentials (set with RC_FILE or source before running)
####################################################################################################
set -a #Exports all variables

#Hostname where app will run
WEBAPP_HOST=asdc.cloud.edu.au
WEBAPP_IP=118.138.248.159
JHUB_LOADBALANCER_IP=118.138.248.98

#Set cluster name
CLUSTER=asdc-k8s
#Create a cluster template of this name
TEMPLATE=${CLUSTER}-template
#Number of nodes in cluster
NODES=4
#Deployment of images on nodes
NODE_ODM=4
NODE_ODM_GPU=2 #Number of NodeODM nodes that will request GPU
#NODE_ODM_GPU=0 #GPU DISABLED
NODE_MICMAC=1
NODE_METASHAPE=0

#NodeODM command line args for GPU and CPU nodes
#https://community.opendronemap.org/t/enabling-split-merge-on-webodm/4378/9
#eg: --max-images: Max images per node, based on available RAM
#    --max-concurrency: Max threads per node, based on CPU cores
#ODM_FLAGS_GPU='["--max-images", "1000", "--max-concurrency", "22"]'
ODM_FLAGS_GPU=''
ODM_FLAGS=''

#Image to use for nodes
#See: https://wiki.openstack.org/wiki/Magnum#Compatibility_Matrix and kube_tag label
IMAGE=fedora-coreos-32 #Requires flannel restart or has dns lookup failures
#This is the default keypair, needs to be the name of an existing keypair in openstack
KEYPAIR=ASDC_ODM
#Private key
KEYFILE=secrets/${KEYPAIR}.pem
#Availability zone
ZONE=monash-02
#External network
NETWORK=monash
#Flavour for the master node used for kubernetes
MASTER_FLAVOUR=m3.small
#Flavour for the minions - this is where the actual pods are deployed
FLAVOUR=mon.c22r60.gpu-p4   #60G RAM
#FLAVOUR=mon.c22r100.gpu-p4.nvme #100G RAM nvme, only 2 nodes available

#Openstack rc file
RC_FILE=secrets/Monash-Drone-openrc.sh

#Secret env file - contains keys for auth0 etc
SECRET_FILE=secrets/secret.env

#Volume sizes for persistent storage in GB
# - Volume assigned to each NodeODM/ClusterODM processing nodes
NODE_VOLSIZE=300
# - PostresSQL Database for the webapp
DB_VOLUME_SIZE=10
# - Working volume for the webapp
WEBAPP_VOLUME_SIZE=500

# JupyterHub chart version to install
#JHUB_CHART_VERSION=0.11.1
# Use a development version to get updated oauthenticator
JHUB_CHART_VERSION=0.11.1-n536.h37990141
# - Database volume for jupyterhub
JHUB_VOLUME_SIZE=1
# Host for jupyterhub
JHUB_HOST=jupyter.asdc.cloud.edu.au
JHUB_ADMIN_USER=

# Need AZ for storageclass
# User for the cephfs shared data volume. Key will be retrieved from the
# secret env file.
ASDC_SHARED_DATA_CEPHFS_USER=ASDC
ASDC_SHARED_DATA_CEPHFS_KEY="<NO_KEY>"

####################################################################################################

#Ensure ID set for openstack
if [ -z ${OS_PROJECT_ID+x} ];
then
  echo "OS_PROJECT_ID is unset";
  if [ -f $RC_FILE ]; then
    echo "Using $RC_FILE."
    source $RC_FILE
  else
    echo "Openstack rc file $RC_FILE does not exist."
    echo "Please source your openstack credentials"
    return 1
  fi
else
  echo "OS_PROJECT_ID is set to '$OS_PROJECT_ID'";
fi

#Auth0 key/secret
if [ -z ${WO_AUTH0_KEY+x} ] || [ -z ${WO_AUTH0_SECRET+x} ] || [ -z ${WO_AUTH0_DOMAIN+x} ];
then
  if [ -f $SECRET_FILE ]; then
    echo "Using $SECRET_FILE."
    source $SECRET_FILE
  else
    echo "Secret env file $SECRET_FILE does not exist."
    echo "Please set key/secrets to use, see: secret.env.template"
  fi
fi

# Generate the secret tokens for jupyterhub
if [ -z ${JHUB_SECRET_TOKEN+x} ];
then
  echo "Generating new JupyterHub secret token"
  JHUB_SECRET_TOKEN=$(openssl rand -hex 32)
  JHUB_CRYPT_KEEPER_KEY1=$(openssl rand -hex 32)
fi

# Generate the secret tokens for WebODM field encryption
if [ -z ${WO_ENCRYPTION_KEY+x} ];
then
  echo "Generating new WebODM secret token"
  WO_ENCRYPTION_KEY=$(openssl rand -hex 16)
fi

# Prepare the shared data creds for a k8s secret
export ASDC_SHARED_DATA_CEPHFS_KEY_BASE64=$(echo $ASDC_SHARED_DATA_CEPHFS_KEY | base64)

####################################################################################################

#If secrets/kubeconfig exists, use it for kubectl
if [ -s "secrets/kubeconfig" ] && grep "${CLUSTER}" secrets/kubeconfig;
then
  export KUBECONFIG=$(pwd)/secrets/kubeconfig
  echo "Set KUBECONFIG='$KUBECONFIG'";
fi

#Check for dependencies
if ! command -v kubectl &> /dev/null
then
  #Add cwd to path so local kubectl can be run without ./
  PATH=$PATH:$(pwd)
  if ! command -v kubectl &> /dev/null
  then
    echo "kubectl could not be found! run ./install.sh to install dependencies"
  fi
fi

if ! command -v helm &> /dev/null
then
  echo "helm could not be found! run ./install.sh to install dependencies"
fi

if ! command -v openstack &> /dev/null
then
  echo "openstack could not be found! run ./install.sh to install dependencies"
fi

if ! command -v flux &> /dev/null
then
  echo "flux could not be found! run ./install.sh to install dependencies"
fi
